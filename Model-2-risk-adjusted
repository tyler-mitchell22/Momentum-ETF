library(pacman)
p_load(tidyquant, BatchGetSymbols, 
       xts, tidyverse, lubridate, TTR, janitor, dygraphs, RSQLite, DBI)
options(scipen = 999)

# Create SQLite database connection
db_path <- "momentum_etf.sqlite"
db_conn <- dbConnect(RSQLite::SQLite(), db_path)

# Ensure clean database by dropping existing tables
dbExecute(db_conn, "DROP TABLE IF EXISTS etf_holdings")
dbExecute(db_conn, "DROP TABLE IF EXISTS etf_performance")
dbExecute(db_conn, "DROP TABLE IF EXISTS performance_metrics")

# Create necessary tables for tracking ETF data
dbExecute(db_conn, "CREATE TABLE IF NOT EXISTS etf_holdings (
  rebalance_date TEXT,
  ticker TEXT,
  risk_adjusted_momentum REAL,
  price REAL,
  monthly_return REAL,
  return_12m REAL,
  return_1m REAL,
  volatility_12m REAL
)")

dbExecute(db_conn, "CREATE TABLE IF NOT EXISTS etf_performance (
  calc_date TEXT PRIMARY KEY,
  etf_nav REAL,
  spy_nav REAL,
  monthly_return REAL
)")

dbExecute(db_conn, "CREATE TABLE IF NOT EXISTS performance_metrics (
  metric_date TEXT PRIMARY KEY,
  cagr_3y REAL,
  cagr_inc REAL,
  total_return_3y REAL,
  total_return_inc REAL,
  max_drawdown_3y REAL,
  max_drawdown_inc REAL,
  sharpe_3y REAL,
  sharpe_inc REAL,
  volatility_3y REAL,
  volatility_inc REAL,
  sortino_3y REAL,
  sortino_inc REAL,
  calmar_3y REAL,
  calmar_inc REAL,
  beta_3y REAL,
  beta_inc REAL,
  alpha_3y REAL,
  alpha_inc REAL
)")

nyse <- tq_exchange("NYSE") |> clean_names()

colnames(nyse)

# Market Parameters
nyse <- nyse |> filter(market_cap > 1000000000, last_sale_price > 5, 
                       ipo_year <= 2012, 
                       country == "United States", 
                       !grepl("\\^|\\.|-", symbol))

tickers <- nyse$symbol

# Data/Stock Collection
nyse_monthly_data <- BatchGetSymbols(
  tickers = tickers, 
  freq.data = "monthly", thresh.bad.data = 0.5,
  first.date = as.Date("2013-01-01"),
  last.date = as.Date("2023-12-31"), 
  cache.folder = file.path(tempdir(), "BGS_Cache"))

price_data <- nyse_monthly_data$df.tickers |> clean_names()

summary(price_data$price_adjusted)

# Data Aggregation
price_data <- price_data |> 
  group_by(ticker) |> 
  arrange(ref_date) |> 
  mutate(monthly_return = price_adjusted / lag(price_adjusted) - 1,
         return_12m = price_adjusted / lag(price_adjusted, 12) - 1,
         return_1m = price_adjusted / lag(price_adjusted, 1) - 1, 
         momentum = return_12m - return_1m,
         volatility_12m = rollapply(monthly_return, width = 12, FUN = sd, align = "right", fill = NA),
         risk_adjusted_momentum = momentum / volatility_12m)

rebalance_dates <- price_data |> filter(!is.na(momentum)) |> 
  pull(ref_date) |> 
  unique() |> 
  sort()

# Initial Investment
etf_nav <- c(100)
nav_dates <- c()
selected_tickers <- list()

# Monthly Rebalance of the ETF
for (i in 1:(length(rebalance_dates) - 1)) {
  current_date <- rebalance_dates[i]
  next_date <- rebalance_dates[i + 1]
  
  current_data <- price_data |> 
    filter(ref_date == current_date, is.finite(risk_adjusted_momentum)) |> 
    arrange(desc(risk_adjusted_momentum)) |> 
    head(10)
  
  top_tickers <- current_data$ticker
  
  next_returns <- filter(price_data, ref_date == next_date, ticker %in% top_tickers)
  avg_return <- mean(next_returns$monthly_return, na.rm = TRUE)
  
  if (!is.na(avg_return)) {
    previous_nav <- last(etf_nav)
    new_nav <- previous_nav * (1 + avg_return)
    etf_nav <- append(etf_nav, new_nav)
    nav_dates <- append(nav_dates, next_date)
    selected_tickers <- append(selected_tickers, list(top_tickers))
    
    # Save selected stocks to SQLite database
    holdings_data <- current_data |>
      select(ticker, risk_adjusted_momentum, price_adjusted, monthly_return, 
             return_12m, return_1m, volatility_12m) |>
      mutate(rebalance_date = as.character(current_date)) |>
      rename(price = price_adjusted)
    
    # Convert to dataframe for database insertion
    db_holdings <- as.data.frame(holdings_data)
    
    # Insert into database
    dbWriteTable(db_conn, "etf_holdings", db_holdings, append = TRUE)
    
    # Store ETF performance data
    performance_data <- data.frame(
      calc_date = as.character(next_date),
      etf_nav = new_nav,
      spy_nav = NA,  # Will update after SPY calculation
      monthly_return = avg_return
    )
    
    # Insert into database
    dbWriteTable(db_conn, "etf_performance", performance_data, append = TRUE)
  }
}

# Convert ETF NAV to a timeseries 
etf_xts <- xts(etf_nav[-1], order.by = nav_dates)

# Collect S&P 500 Data
spy <- BatchGetSymbols(
  tickers = "SPY",
  freq.data = "monthly",
  first.date = as.Date("2013-01-01"), thresh.bad.data = 0.5,
  last.date = as.Date("2023-12-31"), 
  cache.folder = file.path(tempdir(), "BGS_Cache"))

spy_price_data <- spy$df.tickers |> clean_names()

spy_price_data <- spy_price_data |> arrange(ref_date) |> 
  mutate(monthly_returns = price_adjusted / lag(price_adjusted) - 1) |> 
  filter(!is.na(monthly_returns), ref_date %in% index(etf_xts))

# S&P Initial Investment
spy_nav <- c(100)

# Rebalance to Monthly Returns
for (i in 1:nrow(spy_price_data)) {
  returns <- spy_price_data$monthly_returns[i]
  spy_previous_nav <- last(spy_nav)
  spy_new_nav <- spy_previous_nav * (1 + returns)
  spy_nav <- append(spy_nav, spy_new_nav)
  
  # Update SPY NAV in the performance table
  current_date <- as.character(spy_price_data$ref_date[i])
  dbExecute(db_conn, sprintf("UPDATE etf_performance SET spy_nav = %.6f WHERE calc_date = '%s'", 
                             spy_new_nav, current_date))
}

# Convert to timeseries
spy_returns <- xts(spy_price_data$monthly_returns, order.by = spy_price_data$ref_date)

spy_xts <- 100 * cumprod(1 + spy_returns)

colnames(etf_xts) <- "ETF"
colnames(spy_xts) <- "SPY"
combined_nav <- cbind(etf_xts, spy_xts)

dygraph(combined_nav, main = "Momentum ETF vs SPY")  |> 
  dySeries("ETF", label = "Momentum ETF", color = "blue") |> 
  dySeries("SPY", label = "SPY", color = "red") |> 
  dyOptions(stackedGraph = FALSE, drawGrid = TRUE) |> 
  dyRangeSelector()

# Key Performance Metrics 

# Compound Annual Growth 
etf_nav <- etf_nav[order(nav_dates)]

# 3-Year
start_date_3y <- nav_dates[length(nav_dates) - 36]
end_date_3y <- nav_dates[length(nav_dates)]
n_years_3y <- as.numeric(difftime(end_date_3y, start_date_3y, units = "days")) / 365

cagr_3y <- (last(etf_nav) / etf_nav[length(etf_nav) - 36]) ^ (1 / n_years_3y) - 1
cagr_3y

# Since Inception
start_date_inc <- nav_dates[1]
end_date_inc <- nav_dates[length(nav_dates)]
n_years_inc <- as.numeric(difftime(end_date_inc, start_date_inc, units = "days")) / 365

cagr_inc <- (last(etf_nav) / first(etf_nav)) ^ (1 / n_years_inc) - 1
cagr_inc

# Total Return Rate
# 3-Year
total_return_3y <- ((last(etf_nav) - etf_nav[length(etf_nav) - 36]) / etf_nav[length(etf_nav) - 36]) * 100
total_return_3y

# Since Inception
total_return_inc <- ((last(etf_nav) - first(etf_nav)) / first(etf_nav)) * 100
total_return_inc

# Maximum Drawdown
# 3-Year
dd_3y <- tail(etf_xts, 36)
max_dd_3y <- max(dd_3y)
drawdown_3y <- (dd_3y - cummax(dd_3y))/cummax(dd_3y)

max_drawdown_3y <- min(drawdown_3y) * 100
max_drawdown_3y

# Since Inception
run_max_nav_inc <- cummax(etf_xts)
drawdown_inc <- (etf_xts - run_max_nav_inc) / run_max_nav_inc 
max_dd_inc <- min(drawdown_inc) * 100
max_dd_inc

# Sharpe Ratio Assuming 0 Risk Free Rate
# 3-Year
monthly_returns_3y <- diff(tail(etf_nav, 36)) / head(tail(etf_nav, 36), - 1)
monthly_returns_3y

sharpe_ratio_3y <- mean(monthly_returns_3y) / sd(monthly_returns_3y)
sharpe_ratio_3y

# Since Inception
monthly_returns_inc <- diff(etf_nav) / head(etf_nav, -1) 
monthly_returns_inc

sharpe_ratio_inc <- mean(monthly_returns_inc) / sd(monthly_returns_inc)
sharpe_ratio_inc

# Volatility
# 3-Year
volatility_3y <- sd(monthly_returns_3y) * sqrt(12) * 100
volatility_3y

# Since Inception
volatility_inc <- sd(monthly_returns_inc) * sqrt(12) * 100
volatility_inc

# Sortino Ratio Assuming 0 Risk Free Rate
# 3-Year
negatives_3y <- monthly_returns_3y[monthly_returns_3y < 0]
sortino_3y <- (mean(monthly_returns_3y) * 12) / (sd(negatives_3y) * sqrt(12))
sortino_3y 

# Since Inception
negatives_inc <- monthly_returns_inc[monthly_returns_inc < 0]
sortino_inception <- (mean(monthly_returns_inc) * 12) / (sd(negatives_inc) * sqrt(12))
sortino_inception 

# Calmar Ratio
# 3-Year
calmar_3y <- cagr_3y / abs(max_drawdown_3y)
calmar_3y

# Since Inception
calmar_inc <- cagr_inc / abs(max_dd_inc)
calmar_inc

# Beta and Alpha 

spy_returns_3y <- as.numeric(tail(spy_returns, 36))
spy_returns_3y <- diff(tail(spy_nav, 36)) / head(tail(spy_nav, 36), -1)
spy_returns_3y

spy_returns_inc <- as.numeric(spy_returns)
spy_returns_inc <- spy_returns_inc[1:length(monthly_returns_inc)]
spy_returns_inc

# Risk Free Rate - Based on current rate of 3 month T-bills
rf_annual <- 0.0433
rf_monthly <- 0.0433 / 12

# Beta 3-Year
beta_3y <- cov(monthly_returns_3y, spy_returns_3y) / var(spy_returns_3y)
beta_3y

# Beta Since Inception
beta_inc <- cov(monthly_returns_inc, spy_returns_inc) / var(spy_returns_inc)
beta_inc

# Alpha 3-Year
alpha_3y <- mean(monthly_returns_3y) - (rf_monthly + beta_3y * (mean(spy_returns_3y) - rf_monthly))
alpha_3y_annualized_pct <- alpha_3y * 12 * 100
alpha_3y_annualized_pct

# Alpha Since Inception
alpha_inc <- mean(monthly_returns_inc) - (rf_monthly + beta_inc * (mean(spy_returns_inc) - rf_monthly))
alpha_inc_annualized_pct <- alpha_inc * 12 * 100
alpha_inc_annualized_pct

# Store all metrics in the database
current_date <- as.character(Sys.Date())
metrics_data <- data.frame(
  metric_date = current_date,
  cagr_3y = cagr_3y,
  cagr_inc = cagr_inc,
  total_return_3y = total_return_3y,
  total_return_inc = total_return_inc,
  max_drawdown_3y = max_drawdown_3y,
  max_drawdown_inc = max_dd_inc,
  sharpe_3y = sharpe_ratio_3y,
  sharpe_inc = sharpe_ratio_inc,
  volatility_3y = volatility_3y,
  volatility_inc = volatility_inc,
  sortino_3y = sortino_3y,
  sortino_inc = sortino_inception,
  calmar_3y = calmar_3y,
  calmar_inc = calmar_inc,
  beta_3y = beta_3y,
  beta_inc = beta_inc,
  alpha_3y = alpha_3y_annualized_pct,
  alpha_inc = alpha_inc_annualized_pct
)

metrics_data

# Insert metrics data
dbWriteTable(db_conn, "performance_metrics", metrics_data, append = TRUE)

# Close the database connection
dbDisconnect(db_conn)

cat("\nDatabase connection closed. You can now view the 'momentum_etf.sqlite' file with DB Browser for SQLite.\n")
